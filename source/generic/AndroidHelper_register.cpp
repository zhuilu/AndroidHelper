/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "AndroidHelper_autodefs.h"
#include "s3eEdk.h"
#include "AndroidHelper.h"
//Declarations of Init and Term functions
extern s3eResult AndroidHelperInit();
extern void AndroidHelperTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static int GetModeType_wrap()
{
    IwTrace(ANDROIDHELPER_VERBOSE, ("calling AndroidHelper func on main thread: GetModeType"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)GetModeType, 0);
}

static bool HasFeature_wrap(const char* pszFeatureName)
{
    IwTrace(ANDROIDHELPER_VERBOSE, ("calling AndroidHelper func on main thread: HasFeature"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)HasFeature, 1, pszFeatureName);
}

static bool IsTV_wrap()
{
    IwTrace(ANDROIDHELPER_VERBOSE, ("calling AndroidHelper func on main thread: IsTV"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)IsTV, 0);
}

static bool HasGamePad_wrap()
{
    IwTrace(ANDROIDHELPER_VERBOSE, ("calling AndroidHelper func on main thread: HasGamePad"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)HasGamePad, 0);
}

static void Share_wrap(const char* pszSubject, const char* pszTitle, const char* pszText)
{
    IwTrace(ANDROIDHELPER_VERBOSE, ("calling AndroidHelper func on main thread: Share"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Share, 3, pszSubject, pszTitle, pszText);
}

#define GetModeType GetModeType_wrap
#define HasFeature HasFeature_wrap
#define IsTV IsTV_wrap
#define HasGamePad HasGamePad_wrap
#define Share Share_wrap

#endif

void AndroidHelperRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[5];
    funcPtrs[0] = (void*)GetModeType;
    funcPtrs[1] = (void*)HasFeature;
    funcPtrs[2] = (void*)IsTV;
    funcPtrs[3] = (void*)HasGamePad;
    funcPtrs[4] = (void*)Share;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[5] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("AndroidHelper", funcPtrs, sizeof(funcPtrs), flags, AndroidHelperInit, AndroidHelperTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int AndroidHelperStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&AndroidHelperRegisterExt;
    return 0;
}

int g_AndroidHelperVal = AndroidHelperStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    AndroidHelperRegisterExt();
}
#endif

#endif
